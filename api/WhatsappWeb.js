const { Client, MessageMedia, LocalAuth } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');
const QRCode = require('qrcode');
const path = require('path');
const fs = require('fs');
const axios = require('axios');
const stringSimilarity = require('string-similarity');
const config = require('./config');
const dotenv = require('dotenv');
const request = require('request');
const admin = require('firebase-admin');
const { v4: uuidv4 } = require('uuid');
const MessageValidator = require('./message-validator');

dotenv.config();
const serviceAccount = require('../bd.json');

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount)
});
// Configuraci√≥n del entorno
const { NODE_ENV = 'development' } = process.env;
const isProduction = NODE_ENV === 'production';
const directoryPath = path.join(__dirname, 'pedidos');

// Funciones para manejar archivos de conversaci√≥n
function crearArchivoConversacion(telefono) {
  const filePath = path.join(directoryPath, `${telefono}.json`);
  
  // Crear archivo con informaci√≥n del puerto si no existe
  if (!fs.existsSync(filePath)) {
    const archivoConversacion = {
      puerto: port.toString(),
      fechaCreacion: new Date().toISOString(),
      estado: "activo"
    };
    
    fs.writeFileSync(filePath, JSON.stringify(archivoConversacion, null, 2), 'utf8');
    console.log(`üìÅ Archivo de conversaci√≥n creado: ${telefono}.json con puerto ${port}`);
    
    // Programar eliminaci√≥n autom√°tica en 15 minutos
    setTimeout(() => {
      if (fs.existsSync(filePath)) {
        fs.unlinkSync(filePath);
        console.log(`üóëÔ∏è Archivo de conversaci√≥n eliminado autom√°ticamente: ${telefono}.json`);
      }
    }, 900000); // 900 segundos = 15 minutos
  }
}

function verificarArchivoConversacion(telefono) {
  const filePath = path.join(directoryPath, `${telefono}.json`);
  return fs.existsSync(filePath);
}

function obtenerPuertoDelArchivoConversacion(telefono) {
  const filePath = path.join(directoryPath, `${telefono}.json`);
  
  if (!fs.existsSync(filePath)) {
    return null;
  }
  
  try {
    const data = fs.readFileSync(filePath, 'utf8');
    const archivoConversacion = JSON.parse(data);
    return archivoConversacion.puerto || null;
  } catch (error) {
    console.error(`Error al leer el archivo de conversaci√≥n ${telefono}.json:`, error);
    return null;
  }
}

async function obtenerNombreClienteDesdeBD(telefono) {
  try {
    const clientesRef = admin.firestore().collection('clientestelefonos1');
    const clienteSnapshot = await clientesRef.where('telefono', '==', telefono).get();
    
    if (!clienteSnapshot.empty) {
      const clienteDoc = clienteSnapshot.docs[0];
      const clienteData = clienteDoc.data();
      return clienteData.nombre || null;
    }
    return null;
  } catch (error) {
    console.error(`Error al obtener nombre del cliente ${telefono}:`, error);
    return null;
  }
}

// Clase principal
const db = admin.firestore();
const port = 3005;
const empresa = "Taxi Turismo Sangolqui";
const grupounidades = "593994561601-1468369445@g.us";  // ID del grupo de WhatsApp
const grupadmin = "593994561601-1468369445@g.us";  // ID del grupo de WhatsApp

const mysql = require('mysql2/promise'); // Usar la versi√≥n promise
const dbConfig = {
  host: 'localhost',
  user: 'root',
  password: '',
  database: 'chasqui210722'
};
async function connectToDatabase() {
  try {
    const connection = await mysql.createConnection(dbConfig);
    console.log('Conectado a la base de datos MySQL.');
    return connection;
  } catch (err) {
    console.error('Error al conectar con la base de datos:', err);
    throw err;
  }
}
const userId = 100; // Definir userId expl√≠citamente para evitar problemas de paso de par√°metros
// Funci√≥n para escuchar cuando se elimina un registro de la colecci√≥n 'pedidoEnCurso'
async function escucharEliminacionPedidoEnCurso() {
  try {
    const connection = await connectToDatabase();
    db.collection('pedidoEnCurso').onSnapshot(snapshot => {
      snapshot.docChanges().forEach(async change => {
        if (change.type === 'removed') {
          const pedidoData = change.doc.data();
          const docId = change.doc.id;

          // Mostrar los datos del pedido eliminado en la consola
          console.log(`Pedido eliminado: ${docId}`, pedidoData);

          const querySelect = "SELECT `id`, `APP` FROM `usuarios` WHERE `id` = 100";
          const queryUpdate = "UPDATE `usuarios` SET `APP` = `APP` + 1 WHERE `id` = 100";
        
          try {
            console.log('Ejecutando consulta SELECT para verificar existencia del usuario...');
            const [results] = await connection.execute(querySelect);
            console.log('Resultados de la consulta SELECT:', results);
            if (results.length > 0) {
              console.log('Usuario encontrado, ejecutando consulta UPDATE...');
              await connection.execute(queryUpdate);
              console.log(`El valor de APP para el usuario con ID ${userId} ha sido incrementado.`);
            } else {
              console.log('Usuario no encontrado. No se realiz√≥ ninguna actualizaci√≥n.');
            }
          } catch (err) {
            console.error('Error al interactuar con la base de datos:', err);
          }
        }
      });
    }, error => {
      console.error('Error al escuchar los cambios en pedidoEnCurso:', error);
    });
  } catch (err) {
    console.error('Error al conectar a la base de datos para escuchar los cambios:', err);
  }
}
escucharEliminacionPedidoEnCurso();



async function syncPedidoEnCursoToDetallesDeViajes() {
  db.collection('pedidoEnCurso').onSnapshot(snapshot => {
    snapshot.docChanges().forEach(async change => {
      if (change.type === 'added') {
        const pedidoData = change.doc.data();
        const docId = change.doc.id;

        const {
          foto, telefono, telefonoConductor, unidad, placa,
          color, nombre, minutos
        } = pedidoData;

        try {
          // Guardar el nuevo pedido en la colecci√≥n "detallesDeViajes" con el mismo ID
          await db.collection('detallesDeViajes').doc(docId).set(pedidoData);
          console.log(`Pedido ${docId} guardado en detallesDeViajes.`);

          // Actualizar el estado del archivo JSON a "Aceptado"
          actualizarEstadoArchivo(telefono, "Aceptado");

          // Enviar el mensaje con la informaci√≥n del conductor y la placa
          if (telefono.length >= 10) {
            await enviarMensajeDetallesDeViaje(telefono, telefonoConductor, unidad, placa, color, minutos, nombre, foto, pedidoData.puerto);
          } else {
            console.log(`N√∫mero de tel√©fono ${telefono} no v√°lido para enviar mensaje.`);
          }

        } catch (error) {
          console.error(`Error al guardar el pedido ${docId} en detallesDeViajes o en solicitud1:`, error);
        }

      } else if (change.type === 'removed') {
        const pedidoData = change.doc.data();
        const docId = change.doc.id;
        const { telefono, telefonoConductor, randon, idConductor, unidad, nombre, placa, color, foto } = pedidoData;

        // Mostrar los datos del pedido eliminado en la consola
        console.log(`Pedido eliminado: ${docId}`, pedidoData);

        // Enviar el mensaje de pedido finalizado
        if (telefono.length >= 10) {
          await enviarMensajePedidoFinalizado(telefono, randon, unidad, nombre, color, placa, foto, telefonoConductor, pedidoData.puerto);
        } else {
          console.log(`N√∫mero de tel√©fono ${telefono} no v√°lido para enviar mensaje.`);
        }

       
      } else if (change.type === 'modified') {
        const pedidoData = change.doc.data();
        const { telefono, pedido, llegue, latitudConductor, longitudConductor } = pedidoData;

        // Verificar el nuevo estado del pedido
        if (pedido === 'Iniciado') {
          if (telefono.length >= 10) {
       ///     await enviarMensajeEstadoPedido(telefono, 'Su pedido ha sido iniciado.');
          } else {
            console.log(`N√∫mero de tel√©fono ${telefono} no v√°lido para enviar mensaje.`);
          }
        } else if (llegue === true) {
          if (telefono.length >= 10) {
         ///   await enviarMensajeEstadoPedido(telefono, `El conductor ha llegado a su ubicaci√≥n. Ubicaci√≥n del conductor: [Ver en Google Maps](https://www.google.com/maps?q=${latitudConductor},${longitudConductor})`);
          } else {
            console.log(`N√∫mero de tel√©fono ${telefono} no v√°lido para enviar mensaje.`);
          }
        }
      }
    });
  }, error => {
    console.error('Error al obtener los datos:', error);
  });
}
// Funci√≥n para actualizar el estado del archivo JSON
function actualizarEstadoArchivo(telefono, nuevoEstado) {
  const filePath = path.join(directoryPath, `${telefono}.json`);
  
  fs.readFile(filePath, 'utf8', (err, data) => {
    if (err) {
      console.error(`Error al leer el archivo ${filePath}:`, err);
      return;
    }
    
    try {
      const fileData = JSON.parse(data);
      fileData.estado = nuevoEstado;
      
      fs.writeFile(filePath, JSON.stringify(fileData, null, 2), (err) => {
        if (err) {
          console.error(`Error al escribir en el archivo ${filePath}:`, err);
        } else {
          console.log(`Estado del archivo ${filePath} actualizado a ${nuevoEstado}.`);
        }
      });
    } catch (parseError) {
      console.error(`Error al parsear los datos del archivo ${filePath}:`, parseError);
    }
  });
}


async function syncPedidosDisponiblesListener() {
  db.collection('pedidosDisponibles1').onSnapshot(snapshot => {
    snapshot.docChanges().forEach(async change => {
      if (change.type === 'added') {
        const pedidoData = change.doc.data();
        const docId = change.doc.id;
        console.log(`Nuevo pedido disponible a√±adido con ID: ${docId}`, pedidoData);
        
        // Aqu√≠ podr√≠as agregar l√≥gica adicional para procesar el nuevo pedido disponible
        if (pedidoData.valor.includes('CENTRAL')) {







          setTimeout(() => {
            db.collection('pedidosDisponibles1').doc(docId).update({ rango: '5' })
              .then(() => console.log(`Rango actualizado a 8 para el pedido con ID: ${docId}`))
              .catch(error => console.error('Error al actualizar el rango:', error));
          }, 20000); // 20 segundos
        }



      }
    });
  }, error => {
    console.error('Error al obtener los pedidos disponibles:', error);
  });
}

// Funci√≥n para enviar el mensaje con los detalles del viaje
async function enviarMensajeDetallesDeViaje(telefono, telefonoConductor, unidad, placa, color, nombre, minutos, foto, puertoPedido) {
  console.log(`Enviando mensaje con detalles del viaje a ${telefono} - Puerto recibido: "${puertoPedido}", Puerto sistema: "${port}"`);

  // L√≥gica de verificaci√≥n seg√∫n si el puerto est√° vac√≠o o no
  if (!puertoPedido || puertoPedido.trim() === '') {
    console.log(`üîç Puerto del pedido est√° vac√≠o - verificando archivo de conversaci√≥n`);
    // Puerto vac√≠o: verificar archivo de conversaci√≥n
    if (!verificarArchivoConversacion(telefono)) {
      console.log(`‚ùå No se puede enviar mensaje a ${telefono}: puerto vac√≠o y archivo de conversaci√≥n no existe`);
      return;
    }
    console.log(`‚úÖ Puerto vac√≠o pero archivo de conversaci√≥n existe - enviando mensaje a ${telefono}`);
  } else {
    console.log(`üîç Puerto del pedido no est√° vac√≠o: "${puertoPedido}" - comparando con sistema: "${port}"`);
    // Puerto no vac√≠o: comparar puerto del pedido vs puerto del sistema
    if (puertoPedido !== port.toString()) {
      console.log(`‚ùå Puerto no coincide. Pedido: "${puertoPedido}", Sistema: "${port}" - NO enviando mensaje a ${telefono}`);
      return;
    }
    console.log(`‚úÖ Puerto coincide ("${puertoPedido}") - enviando mensaje a ${telefono}`);
  }

  const url = 'http://localhost:3005/app1/send/media-url';
  const params = new URLSearchParams();
  params.append('to', telefono);
  params.append('mediaUrl', foto);
  params.append('caption', `üöñ *Viaje Aceptado* üöñ\n‚è≥ *Tiempo De Llegada:* ${nombre} minutos\n\nüë§ *Conductor:* ${minutos}\nüìû *Tel√©fono:* ${telefonoConductor} \nüöó *Detalles del auto:*\nüöó *Unidad:* ${unidad}\nüìã *Placa:* ${placa}\nüé® *Color:* ${color}`);

  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded'
      },
      body: params
    });

    if (response.ok) {
      const jsonResponse = await response.json();
      console.log(`Mensaje enviado con √©xito a ${telefono}:`, jsonResponse);
    } else {
      console.error(`Error al enviar mensaje a ${telefono}:`, response.statusText);
    }
  } catch (error) {
    console.error(`Error al enviar mensaje a ${telefono}:`, error);
  }
}
// Funci√≥n para enviar el mensaje de pedido finalizado
async function enviarMensajePedidoFinalizado(telefono, randon, unidad, nombre, color, placa, foto, telefonoConductor, puertoPedido) {
  console.log(`Enviando mensaje de pedido finalizado a ${telefono} - Puerto recibido: "${puertoPedido}", Puerto sistema: "${port}"`);

  // L√≥gica de verificaci√≥n seg√∫n si el puerto est√° vac√≠o o no
  if (!puertoPedido || puertoPedido.trim() === '') {
    console.log(`üîç Puerto del pedido est√° vac√≠o - verificando archivo de conversaci√≥n`);
    // Puerto vac√≠o: verificar archivo de conversaci√≥n
    if (!verificarArchivoConversacion(telefono)) {
      console.log(`‚ùå No se puede enviar mensaje a ${telefono}: puerto vac√≠o y archivo de conversaci√≥n no existe`);
      return;
    }
    console.log(`‚úÖ Puerto vac√≠o pero archivo de conversaci√≥n existe - enviando mensaje a ${telefono}`);
  } else {
    console.log(`üîç Puerto del pedido no est√° vac√≠o: "${puertoPedido}" - comparando con sistema: "${port}"`);
    // Puerto no vac√≠o: comparar puerto del pedido vs puerto del sistema
    if (puertoPedido !== port.toString()) {
      console.log(`‚ùå Puerto no coincide. Pedido: "${puertoPedido}", Sistema: "${port}" - NO enviando mensaje a ${telefono}`);
      return;
    }
    console.log(`‚úÖ Puerto coincide ("${puertoPedido}") - enviando mensaje a ${telefono}`);
  }

  const url = 'http://localhost:3005/app1/send/message';
  const params = new URLSearchParams();
  params.append('to', telefono);

const mensajes = [
  `üéâ ¬°Gracias por utilizar nuestros servicios! üöñ Fue un placer atenderte. Califica ‚≠ê nuestro servicio aqu√≠: https://turismoapp.xyz/califica.html?id=${randon}`,
  `üöñ Gracias por preferirnos. Esperamos verte pronto. Deja tu opini√≥n ‚≠ê aqu√≠: https://turismoapp.xyz/califica.html?id=${randon}`,
  `üåü ¬°Gracias por confiar en Taxi Turismo! üöï Tu opini√≥n nos importa. Califica aqu√≠: https://turismoapp.xyz/califica.html?id=${randon}`,
  `üôå ¬°Servicio completado! Gracias por elegirnos üöñ. Ay√∫danos a mejorar con tu calificaci√≥n ‚≠ê: https://turismoapp.xyz/califica.html?id=${randon}`,
  `üì£ Gracias por tu preferencia üöï. Eval√∫a nuestro servicio ‚≠ê aqu√≠: https://turismoapp.xyz/califica.html?id=${randon}`,
  `üéä ¬°Viaje finalizado! Gracias por confiar en nosotros üöñ. Califica tu experiencia ‚≠ê: https://turismoapp.xyz/califica.html?id=${randon}`,
  `üëç ¬°Listo! Tu viaje ha terminado. Gracias por preferirnos üöï. Deja tu rese√±a ‚≠ê: https://turismoapp.xyz/califica.html?id=${randon}`,
  `‚ú® Gracias por usar Taxi Turismo üöñ. Tu opini√≥n cuenta. Califica aqu√≠ ‚≠ê: https://turismoapp.xyz/califica.html?id=${randon}`,
  `üìù Tu viaje ha finalizado üöï. Gracias por preferirnos. Por favor, califica ‚≠ê aqu√≠: https://turismoapp.xyz/califica.html?id=${randon}`,
  `üéà ¬°Gracias por viajar con nosotros! üöñ Ay√∫danos a mejorar con tu calificaci√≥n ‚≠ê: https://turismoapp.xyz/califica.html?id=${randon}`,
  `üì¢ Servicio completado üöï. Gracias por tu confianza. Deja tu calificaci√≥n ‚≠ê: https://turismoapp.xyz/califica.html?id=${randon}`,
  `üí´ ¬°Tu viaje ha llegado a su fin! üöñ Gracias por elegirnos. Califica tu experiencia ‚≠ê: https://turismoapp.xyz/califica.html?id=${randon}`,
  `üìä Gracias por preferir Taxi Turismo üöï. Tu feedback es importante. Califica aqu√≠ ‚≠ê: https://turismoapp.xyz/califica.html?id=${randon}`,
  `üéÄ ¬°Viaje finalizado! üöñ Gracias por confiar en nosotros. Tu calificaci√≥n ‚≠ê nos ayuda a mejorar: https://turismoapp.xyz/califica.html?id=${randon}`,
  `üö¶ Gracias por viajar con Taxi Turismo üöï. Eval√∫a nuestro servicio ‚≠ê: https://turismoapp.xyz/califica.html?id=${randon}`,
  `üèÅ ¬°Llegaste a tu destino! üöñ Gracias por elegirnos. Califica tu viaje ‚≠ê: https://turismoapp.xyz/califica.html?id=${randon}`,
  `üíå ¬°Gracias por preferirnos! üöï Ay√∫danos a crecer con tu calificaci√≥n ‚≠ê aqu√≠: https://turismoapp.xyz/califica.html?id=${randon}`,
  `üåê Gracias por usar nuestro servicio üöñ. Tu opini√≥n es valiosa. Califica ‚≠ê: https://turismoapp.xyz/califica.html?id=${randon}`,
  `üì¶ ¬°Tu viaje ha terminado! üöï Gracias por tu confianza. Deja tu rese√±a ‚≠ê: https://turismoapp.xyz/califica.html?id=${randon}`,
  `üîë ¬°Viaje completado! üöñ Gracias por preferir Taxi Turismo. Califica tu experiencia ‚≠ê: https://turismoapp.xyz/califica.html?id=${randon}`
];

// Seleccionar un mensaje al azar
const mensajeFinal = mensajes[Math.floor(Math.random() * mensajes.length)];

// Agregar el mensaje seleccionado a los par√°metros
///params.append('message', mensajeFinal);


  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded'
      },
      body: params
    });

    if (response.ok) {
      const jsonResponse = await response.json();
      console.log(`Mensaje enviado con √©xito a ${telefono}:`, jsonResponse);
    } else {
      console.error(`Error al enviar mensaje a ${telefono}:`, response.statusText);
    }
  } catch (error) {
    console.error(`Error al enviar mensaje a ${telefono}:`, error);
  }
}


// Funci√≥n para enviar el mensaje de cambio de estado del pedido
async function enviarMensajeEstadoPedido(telefono, mensaje) {
  console.log(`Enviando mensaje de cambio de estado de pedido a ${telefono}`);

  // Esta funci√≥n no recibe puerto, por lo que siempre debe verificar el archivo de conversaci√≥n
  if (!verificarArchivoConversacion(telefono)) {
    console.log(`‚ùå No se puede enviar mensaje a ${telefono}: archivo de conversaci√≥n no existe`);
    return;
  }

  const url = 'http://localhost:3005/app1/send/message';
  const params = new URLSearchParams();
  params.append('to', telefono);
  params.append('message', mensaje);

  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded'
      },
      body: params
    });

    if (response.ok) {
      const jsonResponse = await response.json();
      console.log(`Mensaje enviado con √©xito a ${telefono}:`, jsonResponse);
    } else {
      console.error(`Error al enviar mensaje a ${telefono}:`, response.statusText);
    }
  } catch (error) {
    console.error(`Error al enviar mensaje a ${telefono}:`, error);
  }
}
// Llama a la funci√≥n para iniciar la sincronizaci√≥n
syncPedidoEnCursoToDetallesDeViajes();
syncPedidosDisponiblesListener();

class WhatsappWeb {
  constructor() {
    this.client = null;
    this.initClient();
    this.onQr();
    this.onReady();
    this.onDisconnect();
    this.onAuth();
    this.onAuthFailure();
    this.mediaPath = path.join(__dirname, '/media');
    this.sessionQR = null;
    
    // Sistema de control de velocidad para cumplir con WhatsApp Business
    this.messageQueue = [];
    this.isProcessingQueue = false;
    this.messagesPerMinute = 3; // M√°ximo recomendado
    this.messageInterval = 60000 / this.messagesPerMinute; // 20 segundos entre mensajes
    this.dailyMessageCount = 0;
    this.lastResetDate = new Date().toDateString();
    this.maxDailyMessages = 550; // L√≠mite diario conservador
    
    // Sistema anti-spam: rastrear mensajes recientes
    this.recentMessages = new Map(); // n√∫mero -> [mensajes recientes]
    this.maxRecentMessages = 5; // m√°ximo de mensajes recientes a recordar
    
    // Validador de mensajes para cumplimiento
    this.messageValidator = new MessageValidator();
  }

  initClient() {
    try {
      const initConfig = {
        restartOnAuthFail: true,
        authStrategy: new LocalAuth(),
        puppeteer: {
          headless: true,
          args: [
            '--no-sandbox',
            '--disable-setuid-sandbox',
            '--disable-dev-shm-usage',
            '--disable-accelerated-2d-canvas',
            '--no-first-run',
            '--no-zygote',
            '--disable-gpu',
            '--disable-web-security',
            '--disable-features=VizDisplayCompositor'
          ],
          executablePath: undefined,
          timeout: 60000
        },
        // webVersion: '2.2412.54', // Removido seg√∫n recomendaciones de Discord
        // webVersionCache: { // Removido - causa problemas seg√∫n BenyFilho
        //   type: 'remote',
        //   remotePath: 'https://raw.githubusercontent.com/wppconnect-team/wa-version/main/html/2.2412.54.html'
        // }
      };

      if (isProduction) {
        initConfig.puppeteer = { 
          ...config.puppeteer,
          args: ['--no-sandbox', '--disable-setuid-sandbox'], // Aseg?rate de mantener estos argumentos en producci?n tambi?n
        };
      }

      this.client = new Client(initConfig);
      this.client.initialize();
    } catch (err) {
      console.error(err);
      process.exit(1);
    }
  }

  // Verificar si el mensaje es similar a mensajes recientes (anti-spam)
  isMessageSimilar(to, message) {
    const normalizedNumber = to.replace('@c.us', '').replace('@g.us', '');
    const recentMessages = this.recentMessages.get(normalizedNumber) || [];
    
    for (const recentMsg of recentMessages) {
      const similarity = stringSimilarity.compareTwoStrings(message.toLowerCase(), recentMsg.toLowerCase());
      if (similarity > 0.8) { // 80% de similitud
        console.log(`‚ö†Ô∏è Mensaje similar detectado para ${normalizedNumber} (similitud: ${(similarity * 100).toFixed(1)}%)`);
        return true;
      }
    }
    return false;
  }

  // Agregar mensaje al historial reciente
  addToRecentMessages(to, message) {
    const normalizedNumber = to.replace('@c.us', '').replace('@g.us', '');
    const recentMessages = this.recentMessages.get(normalizedNumber) || [];
    
    recentMessages.push(message);
    if (recentMessages.length > this.maxRecentMessages) {
      recentMessages.shift(); // Eliminar el m√°s antiguo
    }
    
    this.recentMessages.set(normalizedNumber, recentMessages);
  }

  // M√©todo para env√≠o controlado de mensajes
  async sendMessageSafely(to, message, options = {}) {
    // Esta funci√≥n es para mensajes internos del sistema, no requiere verificaci√≥n de archivo de conversaci√≥n
    
    // Simular escritura por 5 segundos
    try {
      const chat = await this.client.getChatById(to);
      await chat.sendStateTyping();        // Comenzar a escribir
      await new Promise(resolve => setTimeout(resolve, 5000));
      await chat.clearState();             // Detener escritura
    } catch (error) {
      console.log('Error al simular escritura:', error);
      // Continuar con el env√≠o del mensaje aunque falle la simulaci√≥n
    }
    
    // Agregar el nombre de la empresa al inicio del mensaje si no es una respuesta de estado
    if (!message.includes('*Seguimos buscando') && !message.includes('conductor')) {
      message = `*${empresa}*\n\n${message}`;
    }

    // Validar el mensaje antes de enviarlo
    const validation = this.messageValidator.validateMessage(message, to);
    
    if (!validation.isValid) {
      console.log(`üö´ Mensaje bloqueado por validaci√≥n: ${to}`);
      validation.errors.forEach(error => console.log(`‚ùå Error: ${error}`));
      return Promise.reject(new Error('Mensaje no v√°lido: ' + validation.errors.join(', ')));
    }

    // Mostrar advertencias si las hay
    if (validation.warnings.length > 0) {
      console.log(`‚ö†Ô∏è Advertencias para mensaje a ${to}:`);
      validation.warnings.forEach(warning => console.log(`‚ö†Ô∏è ${warning}`));
    }

    // Verificar horario apropiado
    const scheduleCheck = this.messageValidator.checkSchedule();
    if (!scheduleCheck.isAllowedTime) {
      console.log(`‚è∞ Mensaje programado para horario permitido: ${to}`);
      // En producci√≥n, podr√≠as agregar a una cola diferida
    }

    // Verificar si el mensaje es demasiado similar a mensajes recientes
    if (this.isMessageSimilar(to, message)) {
      console.log(`üö´ Mensaje bloqueado por similitud para evitar spam: ${to}`);
      return Promise.resolve(); // Resolver sin enviar
    }

    return new Promise((resolve, reject) => {
      this.messageQueue.push({
        to,
        message,
        options,
        resolve,
        reject,
        timestamp: Date.now(),
        validation: validation
      });
      
      this.processMessageQueue();
    });
  }

  async processMessageQueue() {
    if (this.isProcessingQueue || this.messageQueue.length === 0) {
      return;
    }

    this.isProcessingQueue = true;

    try {
      // Resetear contador diario si es un nuevo d√≠a
      const currentDate = new Date().toDateString();
      if (currentDate !== this.lastResetDate) {
        this.dailyMessageCount = 0;
        this.lastResetDate = currentDate;
        console.log('üîÑ Contador diario de mensajes reiniciado');
      }

      while (this.messageQueue.length > 0) {
        // Verificar l√≠mite diario
        if (this.dailyMessageCount >= this.maxDailyMessages) {
          console.log('‚ö†Ô∏è L√≠mite diario de mensajes alcanzado. Pausando hasta ma√±ana.');
          break;
        }

        const messageData = this.messageQueue.shift();
        
        try {
          await this.client.sendMessage(messageData.to, messageData.message, messageData.options);
          this.dailyMessageCount++;
          this.addToRecentMessages(messageData.to, messageData.message); // Agregar al historial
          console.log(`‚úÖ Mensaje enviado de forma segura a ${messageData.to} (${this.dailyMessageCount}/${this.maxDailyMessages})`);
          messageData.resolve();
        } catch (error) {
          console.error(`‚ùå Error enviando mensaje a ${messageData.to}:`, error);
          messageData.reject(error);
        }

        // Pausa obligatoria entre mensajes (cumplimiento WhatsApp Business)
        if (this.messageQueue.length > 0) {
          // Pausa m√°s larga despu√©s de cada 10 mensajes
          const pauseTime = this.dailyMessageCount % 10 === 0 ? this.messageInterval * 3 : this.messageInterval;
          console.log(`‚è±Ô∏è Esperando ${pauseTime/1000} segundos antes del siguiente mensaje...`);
          await new Promise(resolve => setTimeout(resolve, pauseTime));
        }
      }
    } finally {
      this.isProcessingQueue = false;
    }
  }

  onQr() {
    this.client.on('qr', async qr => {
      try {
        // Generar QR como imagen base64
        const qrImage = await QRCode.toDataURL(qr, {
          errorCorrectionLevel: 'M',
          type: 'image/png',
          quality: 0.92,
          margin: 1,
          color: {
            dark: '#000000',
            light: '#FFFFFF'
          },
          width: 256
        });
        
        this.sessionQR = qrImage;
        console.log('üì± Nuevo c√≥digo QR generado para WhatsApp Web');
        
        // Tambi√©n mostrar en terminal para debug
        qrcode.generate(qr, { small: true });
      } catch (error) {
        console.error('Error generando QR:', error);
        this.sessionQR = qr; // Fallback al texto original
      }
    });
  }

  onReady() {
    this.client.on('ready', () => {
      console.log('üü¢ Cliente WhatsApp listo y conectado!');
      console.log(`üì± Informaci√≥n del cliente:`, this.client.info);
      // Limpiar QR cuando el cliente se conecte
      this.sessionQR = null;
    
      this.onMessage();
    });
  }

  onDisconnect() {
    this.client.on('disconnected', (reason) => {
      console.log('üî¥ Cliente desconectado:', reason);
      this.sessionQR = null;
      setTimeout(() => {
        console.log('üîÑ Reinicializando cliente...');
        if (this.client) {
          this.client.destroy();
        }
        this.initClient();
      }, 5000);
    });
  }

  onMessage() {
    this.client.on('message', async (msg) => {
      try {
        // Consultar en la base de datos si el estado es 'true'
        const estadoRef = admin.firestore().collection('configuracion').doc('status');
        const estadoDoc = await estadoRef.get();

        if (!estadoDoc.exists) {
            console.log("No se encontr√≥ el estado de configuraci√≥n en la base de datos.");
            return;
        }

        const estado = estadoDoc.data().estado;
        console.log(`üì® Mensaje recibido de: ${msg.from} | Tipo: ${msg.type} | Contenido: ${msg.body?.substring(0, 50) || 'N/A'}`);
        console.log(`üîß Estado del sistema: ${estado}`);

        if (estado !== true) {
            return;
        }
      
   

        if (msg.from.endsWith('@g.us') || msg.from.endsWith('status@broadcast')) {
            console.log(`Mensaje de grupo o broadcast ignorado. ${msg.from}`);
            return;
        }

        if (msg.type === 'image' || msg.type === 'status@broadcast' || msg.type === 'status') {
            console.log("Mensaje de imagen o broadcast ignorado.");
            return;
        }

      // Extraer n√∫mero de tel√©fono del mensaje
      const telefono = msg.from.replace('@c.us', '');
      
      // Crear archivo de conversaci√≥n cuando el cliente escriba, env√≠e ubicaci√≥n o audio
      if (msg.type === 'chat' || msg.type === 'location' || (msg.type === 'ptt' && msg.hasMedia)) {
        crearArchivoConversacion(telefono);
      }

      if (msg.type === 'ptt' && msg.hasMedia) {
            console.log("Mensaje de audio ignorado.");
            return;

      }
      
      const saludos = [
        'hola', 'buenos dias', 'buenas noches', 'saludos', 'Movil', 'hola, ¬øpodr√≠a pedir un taxi?',
        'buenos d√≠as, necesito un taxi por favor', 'un movil, un taxi', 'un m√≥vil', 'me env√≠a un m√≥vil por favor',
        'un m√≥vil por favor', 'buen d√≠a un taxi', 'buenos d√≠as', 'me puede mandar un m√≥vil por favor',
        'me podr√≠a enviar un m√≥vil', 'me podr√≠a mandar un m√≥vil', 'buenos d√≠as un m√≥vil por favor',
        'buen d√≠a por favor un m√≥vil', 'm√≥vil por favor', 'un taxi por favor', 'buenas tardes env√≠eme un m√≥vil por favor',
        'buenas tardes disculpe un m√≥vil por favor', 'tienes m√≥viles disponibles', 'buenas tardes tiene servicio',
        'tiene m√≥vil disponible', 'servicio de radio m√≥vil', 'hola, ¬øpodr√≠a enviarme un taxi?',
        'buenas noches, necesito un TAXI para ir a...', 'hola, necesito un taxi para el aeropuerto',
        'buenos d√≠as, ¬øpodr√≠a llamarme un taxi?', 'buenas tardes env√≠eme un m√≥vil por favor', 'hola, necesito un taxi urgente',
        'buenos d√≠as, necesito un m√≥vil por favor', 'buenas tardes, ¬øpodr√≠a solicitar un taxi?', 'hola, ¬øpodr√≠a enviarme un taxi?',
        'buenas noches, necesito un movil para ir a...', 'hola, necesito un taxi para el aeropuerto',
        'buenos d√≠as, ¬øpodr√≠a llamarme un taxi?', '¬øpodr√≠a enviarme un taxi a mi ubicaci√≥n?', 'hola, necesito un taxi urgente',
        'buenos d√≠as, necesito un m√≥vil por favor', 'un m√≥vil, un m√≥vil', 'buenas tardes, ¬øpodr√≠a solicitar un m√≥vil?',
        'hola, ¬øpodr√≠a enviarme un m√≥vil?', 'buenas noches, necesito un m√≥vil para ir a...', 'hola, necesito un m√≥vil para el aeropuerto',
        'buenos d√≠as, ¬øpodr√≠a llamarme un m√≥vil?', '¬øpodr√≠a enviarme un m√≥vil a mi ubicaci√≥n?', 'hola, necesito un m√≥vil urgente',
        'buenas noches, ¬øpodr√≠a pedir un m√≥vil con asiento de beb√©?', 'hola, ¬øpodr√≠a enviarme un m√≥vil para 4 personas?',
        'buenos d√≠as, ¬øpodr√≠a reservar un m√≥vil para dentro de una hora?', 'buenas tardes, necesito un m√≥vil para ir al centro',
        'hola, necesito un m√≥vil para ir al hospital', 'buenas noches m√≥vil para ma√±ana temprano?', 'hola, ¬øpodr√≠a enviar un m√≥vil con maletero grande?',
        'buenos d√≠as, necesito un TAXI para ir al aeropuerto', 'buenas tardes, ¬øpodr√≠a solicitar un m√≥vil para', 'buenas noches, ¬øpodr√≠a enviarme un taxi para'
    ];


        let similarity = stringSimilarity.findBestMatch(msg.body.toLowerCase(), saludos);
    
     
                    if (similarity.bestMatch.rating > 0.6) {
  console.log(`Saludo reconocido: ${similarity.bestMatch.target}, similitud ${similarity.bestMatch.rating}`);

  // Para saludos, solo usar el nombre de WhatsApp (sin consultar BD)
  const nombreWhatsApp = msg._data.notifyName || 'Cliente';

  const mensajes = [
    `${nombreWhatsApp}, üöñ Para solicitar un taxi, m√°ndame tu ubicaci√≥n actual, por favor.`,
    `${nombreWhatsApp}, ü§ñ Si quieres un taxi, comparte tu ubicaci√≥n con un mensaje.`,
    `${nombreWhatsApp}, üëã Env√≠ame tu ubicaci√≥n para gestionar tu taxi.`,

    `${nombreWhatsApp}, üìç Ind√≠came d√≥nde est√°s para enviarte un taxi.`,

    `${nombreWhatsApp}, üöï M√°ndame tu localizaci√≥n y en seguida te busco un taxi.`,

    `${nombreWhatsApp}, üòä Por favor comparte tu ubicaci√≥n para solicitar tu taxi.`,

    `${nombreWhatsApp}, üì≤ Facil√≠tame tu localizaci√≥n actual y te asigno un taxi.`,

    `${nombreWhatsApp}, üôå Dime d√≥nde te encuentras enviando tu ubicaci√≥n.`,

    `${nombreWhatsApp}, üó∫Ô∏è Comparte tu ubicaci√≥n y en breve tendr√°s un taxi.`,

    `${nombreWhatsApp}, ‚ú® Para un taxi, env√≠a tu ubicaci√≥n ahora mismo.`,

    `${nombreWhatsApp}, ‚≠ê Env√≠ame tu ubicaci√≥n actual para pedir tu taxi.`,

    `${nombreWhatsApp}, üéØ Comparte tu localizaci√≥n y te conecto con un conductor.`,

    `${nombreWhatsApp}, üí¨ ¬øD√≥nde est√°s? M√°ndame tu localizaci√≥n.`,

    `${nombreWhatsApp}, ü§ù Comparte tu ubicaci√≥n y listo, ¬°tu taxi viene en camino!`,

    `${nombreWhatsApp}, üéâ M√°ndame tu ubicaci√≥n y comienzo a buscar tu taxi.`,

    `${nombreWhatsApp}, üïí Por favor env√≠a tu localizaci√≥n para tramitar tu taxi.`,

    `${nombreWhatsApp}, üí´ Para un taxi r√°pido, comp√°rteme tu ubicaci√≥n.`,

    `${nombreWhatsApp}, üö¶ Facil√≠tame tu ubicaci√≥n y te asigno un conductor.`,

    `${nombreWhatsApp}, üåü Necesito tu localizaci√≥n para gestionar tu taxi.`,

    `${nombreWhatsApp}, üì¢ Env√≠a tu localizaci√≥n actual y te consigo un taxi.`,

    `${nombreWhatsApp}, üõ£Ô∏è Comparte tu ubicaci√≥n para iniciar tu viaje.`,

    `${nombreWhatsApp}, üîî Dime tu ubicaci√≥n y busco un taxi para ti.`,

    `${nombreWhatsApp}, üí° Para un taxi, m√°ndame tu localizaci√≥n.`,

    `${nombreWhatsApp}, üéà Comparte tu localizaci√≥n y te ayudo al instante.`,

    `${nombreWhatsApp}, üì¶ Necesito tu ubicaci√≥n para asignarte un taxi.`,

    `${nombreWhatsApp}, ‚ö° Env√≠a tu ubicaci√≥n y en segundos tendr√°s un taxi.`,

    `${nombreWhatsApp}, üìÜ Comparte tu ubicaci√≥n y gestiono tu taxi.`,

    `${nombreWhatsApp}, ‚úã Por favor comparte tu localizaci√≥n para pedir taxi.`,

    `${nombreWhatsApp}, üåà M√°ndame tu ubicaci√≥n actual y te asigno un conductor.`,

    `${nombreWhatsApp}, üîç Para buscar un taxi, env√≠a tu ubicaci√≥n.`,

    `${nombreWhatsApp}, üéµ Comparte tu ubicaci√≥n y tu taxi estar√° en camino.`,

    `${nombreWhatsApp}, üìñ Facil√≠tame tu ubicaci√≥n y gestiono el servicio.`,

    `${nombreWhatsApp}, üåû Env√≠ame tu ubicaci√≥n para solicitar tu taxi.`,

    `${nombreWhatsApp}, üåô Comparte tu  ubicaci√≥n te ayudo a pedir un taxi.`,

    `${nombreWhatsApp}, üìå Para un taxi r√°pido, env√≠a tu ubicaci√≥n.`,

    `${nombreWhatsApp}, üíº M√°ndame tu ubicaci√≥n actual y te conecto con un taxi.`,

    `${nombreWhatsApp}, üé® Comparte tu localizaci√≥n y preparo tu viaje.`,

    `${nombreWhatsApp}, üöÄ Env√≠ame tu ubicaci√≥n y agilizo tu solicitud de taxi.`,

    `${nombreWhatsApp}, üñêÔ∏è Facil√≠tame tu ubicaci√≥n para gestionar tu taxi.`,

    `${nombreWhatsApp}, üìº Comparte tu ubicaci√≥n y en breve tendr√°s un conductor.`,

    `${nombreWhatsApp}, üèÅ Para tu taxi, env√≠a tu ubicaci√≥n actual.`,

    `${nombreWhatsApp}, üì∞ Comparte tu ubicaci√≥n y te asigno un taxi al instante.`,
  ];

  const responseMsg = mensajes[Math.floor(Math.random() * mensajes.length)];
  this.sendMessageSafely(msg.from, responseMsg);
}

    } catch (error) {
      console.error('Error en el procesamiento del mensaje:', error);
    }

    // Procesar mensajes de ubicaci√≥n
    if (msg.type === 'location') {
      try {
        // Extraer n√∫mero del remitente
        const senderNumber = msg.from.split('@')[0];
        const normalizedNumber = senderNumber.includes('@c.us')
          ? senderNumber.split('@')[0]
          : senderNumber;

        // Obtener nombre de contacto de WhatsApp
        const contact = await this.client.getContactById(msg.from);
        const nombreWhatsApp = contact.pushname || msg._data.notifyName || 'Cliente';
        
        // Obtener nombre del cliente desde la base de datos
        const nombreBD = await obtenerNombreClienteDesdeBD(normalizedNumber);
        
        // Concatenar nombres: nombre de BD entre par√©ntesis + nombre de WhatsApp
        const nombre = nombreBD ? `${nombreBD} (${nombreWhatsApp})` : nombreWhatsApp;

        // Consultar pedido existente
        const pedidosRef = admin.firestore().collection('pedidosDisponibles1');
        const pedidoSnapshot = await pedidosRef.where('telefono', '==', normalizedNumber).get();

        // Determinar rango de inserci√≥n seg√∫n n√∫mero de pedidos
        const pedidosCount = (await pedidosRef.get()).size;
        const rangoInsercion = pedidosCount > 3 ? '5' : '1';

        if (pedidoSnapshot.empty) {
          // No hay pedido en curso: procesar nueva solicitud
          const latitude = msg.location.latitude.toString();
          const longitude = msg.location.longitude.toString();

          // Obtener detalles de la direcci√≥n
          const addressDetails = await getAddressDetailsFromCoordinates(latitude, longitude);
          const formattedAddress = addressDetails?.street
            ? `${addressDetails.street}, ${addressDetails.intersection || ''}`
            : 'Direcci√≥n no disponible';
          const sector = addressDetails?.sector || 'Sector Salgolqui';
          const intersection = addressDetails?.intersection || 'Intersecci√≥n no disponible';

          // Generar c√≥digos aleatorios
          function generarRandomCD() {
            const numero = Math.floor(Math.random() * 100) + 1;
            return `T-${numero.toString().padStart(2, '0')}`;
          }
          function generarRandon() {
            const letras = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
            const numeros = '0123456789';
            let resultado = '';
            let esLetra = Math.random() < 0.5;
            for (let i = 0; i < 6; i++) {
              resultado += esLetra
                ? letras.charAt(Math.floor(Math.random() * letras.length))
                : numeros.charAt(Math.floor(Math.random() * numeros.length));
              esLetra = !esLetra;
            }
            return resultado;
          }
          const codigo  = generarRandomCD();
          const randon  = generarRandon();

          // Mensajes de confirmaci√≥n (elige 10 variantes)
         
const mensajes = [
  "üöñ ¬°Genial! Gracias por compartir tu ubicaci√≥n. Estamos procesando tu solicitud‚Ä¶",
  "üìç Ubicaci√≥n recibida. En breve te asigno un conductor.",
  "üöï Recibimos tu ubicaci√≥n. Gestionando tu taxi ahora.",
  "ü§ñ Ubicaci√≥n captada. Tramitando tu pedido de taxi.",
  "‚ú® Gracias por la ubicaci√≥n. Buscando conductor disponible‚Ä¶",
  "üôå Tu ubicaci√≥n est√° en nuestros sistemas. Solicitando servicio.",
  "üîî Ubicaci√≥n confirmada. Preparando tu viaje.",
  "üì≤ Gracias por compartir tu localizaci√≥n. Tu taxi viene en camino.",
  "‚ö° Ubicaci√≥n obtenida. Procesando tu solicitud r√°pidamente.",
  "üåü ¬°Listo! Estamos gestionando tu taxi a tu ubicaci√≥n.",
  "‚úÖ Recibimos tu ubicaci√≥n. En breve confirmo tu viaje.",
  "üïê Tu ubicaci√≥n ya est√° registrada. Buscando conductor.",
  "üì° Ubicaci√≥n detectada. Un momento por favor.",
  "üîç Ubicaci√≥n capturada. Asignando veh√≠culo.",
  "üéâ ¬°Todo listo! Gestionando tu taxi.",
  "üöÄ Tu taxi est√° en camino, un momento‚Ä¶",
  "üìå Ubicaci√≥n confirmada. En camino‚Ä¶",
  "üìà Analizando tu ubicaci√≥n para asignar el mejor conductor.",
  "üí¨ Ubicaci√≥n recibida. Te aviso en un instante.",
  "üõ£Ô∏è Ubicaci√≥n registrada. Preparando tu viaje."
];




      const selectedMsg = mensajes[Math.floor(Math.random() * mensajes.length)];

      // Enviar mensaje de confirmaci√≥n
      await this.sendMessageSafely(msg.from, selectedMsg);

      // Preparar datos del nuevo pedido
      const newPedidoData = {
        clave:             codigo,
        codigo:            nombre,
        coorporativo:      false,
        destino:           sector,
        direccion:         formattedAddress,
        estado:            "Disponible",
        fecha:             new Date().toLocaleString('es-EC', { timeZone: 'America/Guayaquil' }),
        foto:              "0",
        idConductor:       "Sin asignar",
        latitud:           latitude,
        latitudConductor:  "",
        llegue:            false,
        longitud:          longitude,
        longitudConductor: "",
        nombreCliente:     nombre,
        pedido:            "Disponible",
        randon:            randon,
        rango:             rangoInsercion,
        sector:            intersection,
        telefono:          normalizedNumber,
        valor:             codigo,
          puerto:            "3005",
        viajes:            codigo
      };

      // Crear pedido en Firestore
      const docRef = pedidosRef.doc();
      newPedidoData.id = docRef.id;
      await docRef.set(newPedidoData);
      console.log(`Nuevo pedido creado con ID: ${docRef.id}`);

      // Iniciar verificaci√≥n peri√≥dica del estado
      revisarEstadoPedido(msg, docRef.id, this);
    } else {
      // Ya existe un pedido en curso
      await this.sendMessageSafely(
        msg.from,
        "üö´ Ya tienes un pedido en curso. Por favor espera a que termine o canc√©lalo antes de solicitar uno nuevo."
      );
    }
  } catch (error) {
    console.error('Error procesando el mensaje de ubicaci√≥n:', error);
    this.sendMessageSafely(
      msg.from,
      '‚ùå Hubo un error al procesar tu ubicaci√≥n. Por favor intenta nuevamente m√°s tarde.'
    );
  }
}







      async function getAddressDetailsFromCoordinates(latitude, longitude) {
        const apiKey = "AIzaSyC9PomQk6iYVbAd4eHGoxIZgynj7sVNn5g"; // Usa tu clave real de Google Maps API
        const url = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=${apiKey}`;
    
        try {
            // Primero busca si la ubicaci√≥n est√° dentro de alg√∫n pol√≠gono almacenado en la base de datos
            let sectorFromDB = await getSectorFromDatabase(latitude, longitude);
    
            // Consultar la API de Google Maps
            const response = await axios.get(url);
            if (response.data.results.length > 0) {
                const results = response.data.results; // Trabaja con los resultados obtenidos
                const firstResult = results[0]; // El primer resultado generalmente tiene la informaci√≥n m√°s relevante
                const addressComponents = firstResult.address_components;
    
                // Extraer la direcci√≥n formateada
                const formattedAddress = firstResult.formatted_address;
    
                // Extraer componentes espec√≠ficos
                const street = addressComponents.find(ac => ac.types.includes('route'))?.long_name || formattedAddress;
    
                // Si no se encuentra un sector en la base de datos, utiliza el de Google Maps
                const sector = sectorFromDB || addressComponents.find(ac => ac.types.includes('sublocality_level_1'))?.long_name || 'Sector desconocido';
    
                // Intentar encontrar una intersecci√≥n cercana usando una b√∫squeda en los resultados adicionales
                let intersection = 'Intersecci√≥n desconocida';
                for (let result of results) {
                    const potentialStreet = result.address_components.find(ac => ac.types.includes('route'))?.long_name;
                    if (potentialStreet && potentialStreet !== street) {
                        intersection = potentialStreet;
                        break;
                    }
                }
    
                // Si despu√©s de la b√∫squeda sigue siendo 'Intersecci√≥n desconocida', asignar el formattedAddress
                if (intersection === 'Intersecci√≥n desconocida') {
                    intersection = formattedAddress;
                }
    
                console.log(`Calle: ${street}`);
                console.log(`Intersecci√≥n: ${intersection}`);
                console.log(`Sector: ${sector}`);
                console.log(`Direcci√≥n Formateada: ${formattedAddress}`);
    
                return { street, intersection, sector, formattedAddress };
            } else {
                throw new Error('No se encontraron resultados para las coordenadas dadas.');
            }
        } catch (error) {
            console.error('Error al obtener detalles de la direcci√≥n desde Google Maps:', error);
            throw error;
        }
    }
    
    // Funci√≥n para verificar si las coordenadas est√°n dentro de alg√∫n pol√≠gono almacenado en la base de datos
    async function getSectorFromDatabase(latitude, longitude) {
        try {
            const poligonosSnapshot = await db.collection('poligonos').get();
    
            for (const doc of poligonosSnapshot.docs) {
                const poligonoData = doc.data();
                const coordenadas = poligonoData.coordenadas;
    
                if (isPointInPolygon(latitude, longitude, coordenadas)) {
                    console.log(`Coordenadas dentro del pol√≠gono: ${poligonoData.nombre_sector}`);
                    return poligonoData.nombre_sector;
                }
            }
    
            console.log('Coordenadas no encontradas en ning√∫n pol√≠gono.');
            return null;
        } catch (error) {
            console.error('Error al consultar la base de datos:', error);
            throw error;
        }
    }
    
    // Funci√≥n para verificar si un punto est√° dentro de un pol√≠gono
    function isPointInPolygon(lat, lng, polygonCoords) {
        let inside = false;
        const x = lng, y = lat;
    
        for (let i = 0, j = polygonCoords.length - 1; i < polygonCoords.length; j = i++) {
            const xi = polygonCoords[i].lng, yi = polygonCoords[i].lat;
            const xj = polygonCoords[j].lng, yj = polygonCoords[j].lat;
    
            const intersect = ((yi > y) !== (yj > y)) && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);
            if (intersect) inside = !inside;
        }
    
        return inside;
    }


      async function revisarEstadoPedido(msg, pedidoId, whatsappInstance) {
        const pedidosRef = admin.firestore().collection('pedidosDisponibles1');
        const canceladosRef = admin.firestore().collection('PedidosCancelados');
        let startTime = Date.now();
        let mensajesEnviados = 0;
      
        let intervalo = setInterval(async () => {
          try {
            const docRef = pedidosRef.doc(pedidoId);
            const doc = await docRef.get();
            if (!doc.exists) {
              console.log('No se encontr√≥ el pedido');
              clearInterval(intervalo);
              return;
            }
      
            const pedidoData = doc.data();
            const { clave, direccion, destino, estado, rango } = pedidoData;
            let elapsedTime = Date.now() - startTime;
      
            if (estado === "Disponible") {
              // Actualizar el rango a 5 si es 1
              if (parseInt(rango) === 1) {
                await pedidosRef.doc(pedidoId).update({ rango: '10' });
              }
      
              // Enviar el primer mensaje a los 5 minutos
              if (elapsedTime > 300000 && mensajesEnviados === 0) { // 5 minutos
                mensajesEnviados++;
          //      await whatsappInstance.sendMessageSafely(msg.from, '*Seguimos buscando un conductor para ti....* ¬°Valoramos mucho tu tiempo!');
                const number1 = '593994633688-1548213413@g.us';
                const message = `*SOLICITUD PENDIENTE EN APP* #‚É£  ${clave} 
      
      Calle: ${direccion}üìç
      ${destino}`;
                whatsappInstance.client.sendMessage(number1, message);
              }
      
              // Enviar un segundo mensaje a los 10 minutos
              if (elapsedTime > 600000 && mensajesEnviados === 1) { // 10 minutos
                mensajesEnviados++;
               // const mensaje = '*Seguimos trabajando para encontrar un conductor para ti.*';
                await whatsappInstance.sendMessageSafely(msg.from, mensaje);
              }
      
              // Cancelar el pedido despu√©s de 15 minutos
              if (elapsedTime > 900000) { // 15 minutos
                console.log('El pedido sigue disponible despu√©s de 15 minutos.');
                await canceladosRef.doc(pedidoId).set(pedidoData);
                await pedidosRef.doc(pedidoId).delete();
                clearInterval(intervalo);
      
                await whatsappInstance.sendMessageSafely(msg.from, 'üö´ *Lo sentimos, no hemos podido conseguir una unidad.* Por favor, int√©ntelo nuevamente envi√°ndonos *su ubicaci√≥n actual.*');
              }
            } else {
              console.log('El pedido ya no est√° disponible.');
              clearInterval(intervalo);
            }
          } catch (error) {
            if (error.code !== 'ENOENT') {
              console.error('Error al verificar el estado del pedido:', error);
            }
          }
        }, 30000); // Revisa el estado cada 30 segundos
      } 
      


// Funci√≥n para verificar si la ubicaci√≥n est√° dentro de alg√∫n pol√≠gono en Firestore
async function isLocationInPolygons(latitude, longitude) {
  try {
      const poligonosRef = admin.firestore().collection('poligonoscirque');
      const snapshot = await poligonosRef.get();

      for (const doc of snapshot.docs) {
          const polygonData = doc.data();
          const polygonCoords = polygonData.coordenadas;

          if (isPointInPolygon1(latitude, longitude, polygonCoords)) {
              console.log(`La ubicaci√≥n est√° dentro del pol√≠gono: ${polygonData.nombre_sector}`);
              return true; // Est√° dentro del pol√≠gono
          }
      }

      console.log('La ubicaci√≥n no est√° dentro de ning√∫n pol√≠gono.');
      return false; // No est√° dentro de ning√∫n pol√≠gono
  } catch (error) {
      console.error('Error consultando Firestore:', error);
      throw error;
  }
}

// Verificar si un punto est√° dentro de un pol√≠gono
function isPointInPolygon1(lat, lng, polygonCoords) {
  let inside = false;
  const x = lng, y = lat;

  for (let i = 0, j = polygonCoords.length - 1; i < polygonCoords.length; j = i++) {
      const xi = polygonCoords[i].lng, yi = polygonCoords[i].lat;
      const xj = polygonCoords[j].lng, yj = polygonCoords[j].lat;

      const intersect = ((yi > y) !== (yj > y)) && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);
      if (intersect) inside = !inside;
  }

  return inside;
}



    
    function obtenerMensaje(mensajesEnviados) {
        const mensajes = [

          
           // '*Seguimos buscando un taxi....*\n\nGracias por tu paciencia\n\n*¬°Valoramos tu tiempo!*',
            'La b√∫squeda de una unidad contin√∫a gracias por tu paciencia. \n\nSi deseas *cancelar* la busqueda, simplemente responde con la palabra "cancelar".',
        ];
    
        return mensajes[(mensajesEnviados - 1) % mensajes.length];
    }
    



        if (/cancelar|anular|ya no quiero el taxi|cancele/i.test(msg.body)) {
            const telefono = msg.from.split('@')[0];
            try {
                const cancelMessage = await cancelarPedido(telefono, msg.from, this);
                if (cancelMessage && verificarArchivoConversacion(telefono)) {
                    this.client.sendMessage(msg.from, cancelMessage);
                }
            } catch (error) {
                console.error('Error al cancelar el pedido:', error);
                if (verificarArchivoConversacion(telefono)) {
                    this.client.sendMessage(msg.from, 'Hubo un error al procesar su solicitud de cancelaci√≥n.');
                }
            }
            return;
        }


        async function cancelarPedido(phone, from, whatsappInstance) {
          try {
            const normalizedPhone = phone.includes('@c.us') ? phone.split('@')[0] : phone; // Normaliza el n√∫mero si es necesario
            const pedidosRef = admin.firestore().collection('pedidosDisponibles1');
            
            // Busca un pedido con estado "Disponible"
            let querySnapshot = await pedidosRef.where('telefono', '==', normalizedPhone).where('estado', '==', 'Disponible').get();
        
            if (querySnapshot.empty) {
              // Si no se encuentra en 'pedidosDisponibles', busca en 'PedidosEnCurso'
              const pedidosEnCursoRef = admin.firestore().collection('pedidoEnCurso');
              querySnapshot = await pedidosEnCursoRef.where('telefono', '==', normalizedPhone).where('estado', '==', 'Aceptado').get();
              
              if (querySnapshot.empty) {
                console.log('No se encontr√≥ un pedido disponible para cancelar en ninguna colecci√≥n.');
                return 'No se encontr√≥ tu pedido o ya no est√° en estado disponible para ser cancelado.';
              } else {
                // Si se encuentra un pedido en estado "Aceptado"
                const pedidoDoc = querySnapshot.docs[0];
                const docData = pedidoDoc.data();
        
                // Enviar mensaje al conductor si el pedido est√° siendo cancelado y est√° en estado "Aceptado"
                if (docData.estado === 'Aceptado' && docData.telefonoConductor) {
                  const numeroLocal = docData.telefonoConductor;
                  const numerounidad = docData.unidad;
                  const numerocliente = docData.telefono;
                  const numeroSinPrimerCaracter = numeroLocal.slice(1);
                  const numeroInternacional = "593" + numeroSinPrimerCaracter;
        
                  await whatsappInstance.client.sendMessage(numeroInternacional + "@c.us", 'üö´ Su Viaje ha sido *Cancelado por el cliente.* Esperamos poder asignarte nuevos viajes. üöê');
                  await whatsappInstance.client.sendMessage(grupounidades, `üö´  El pedido ha sido cancelado *POR EL CLIENTE +${numerocliente}  Y  ACEPTADO POR LA UNIDAD* - ${numerounidad}`);
           
           



                }
        
                // Usar transacci√≥n para actualizar y mover el pedido a la colecci√≥n 'PedidosCancelados'
                await admin.firestore().runTransaction(async (transaction) => {
                  // Actualizar el estado del pedido a "Cancelado"
                  transaction.update(pedidoDoc.ref, { estado: 'Cancelado' });
                  console.log(`Pedido cancelado exitosamente: ${pedidoDoc.id}`);
        
                  // Mover el pedido a la colecci√≥n 'PedidosCancelados'
                  const pedidosCanceladosRef = admin.firestore().collection('PedidosCancelados');
                  transaction.set(pedidosCanceladosRef.doc(pedidoDoc.id), docData);
        
                  // Eliminar el documento original despu√©s de moverlo
                  transaction.delete(pedidoDoc.ref);
                });
        
                console.log(`Pedido movido a 'PedidosCancelados' y eliminado de la colecci√≥n original.`);
                
                            // Enviar mensaje al cliente
            await whatsappInstance.sendMessageSafely(from, 'üö´ Su pedido ha sido *cancelado.* Esperamos poder servirle en su pr√≥ximo viaje. üöê');
                return;
              }
            }
        
            // Suponemos que solo hay un pedido activo por n√∫mero de tel√©fono en cualquier momento
            const pedidoDoc = querySnapshot.docs[0];
            const pedidoData = pedidoDoc.data();
        
            // Verificar si el campo 'pedido' es 'Iniciado'
            if (pedidoData.pedido === 'Iniciado') {
              console.log('El pedido ya ha sido aceptado. La funci√≥n se detiene.');
                                await whatsappInstance.sendMessageSafely(from, 'üö´ ‚úã Su pedido ha sido *Iniciado el Tax√≠metro.* no puede ser Cancelado. üöê');
              return;
            }
        
            // Usar transacci√≥n para actualizar y mover el pedido a la colecci√≥n 'PedidosCancelados'
            await admin.firestore().runTransaction(async (transaction) => {
              // Actualizar el estado del pedido a "Cancelado"
              transaction.update(pedidoDoc.ref, { estado: 'Cancelado' });
              console.log(`Pedido cancelado exitosamente: ${pedidoDoc.id}`);
        
              // Mover el pedido a la colecci√≥n 'PedidosCancelados'
              const pedidosCanceladosRef = admin.firestore().collection('PedidosCancelados');
              transaction.set(pedidosCanceladosRef.doc(pedidoDoc.id), pedidoData);
        
              // Eliminar el documento original despu√©s de moverlo
              transaction.delete(pedidoDoc.ref);
            });
        
            console.log(`Pedido movido a 'PedidosCancelados' y eliminado de la colecci√≥n original.`);
            
            // Enviar mensaje al cliente
            await whatsappInstance.sendMessageSafely(from, 'üö´ Su pedido ha sido *cancelado.* Esperamos poder servirle en su pr√≥ximo viaje. üöê');
        
        
        
        
        
        
        
            return;
        
          } catch (error) {
            console.error('Error al cancelar el pedido:', error);
            return 'Hubo un error al procesar tu solicitud de cancelaci√≥n. Por favor, intenta nuevamente.';
          }
        }
        

     



    });






}




  async createPedidoDisponible(pedido) {
    try {
      await admin.firestore().collection('pedidosDisponibles').doc(pedido.id).set(pedido);
      console.log(`Documento con ID ${pedido.id} creado en pedidosDisponibles`);
    } catch (error) {
      console.error('Error al crear el documento en pedidosDisponibles:', error);
    }
  }

  async updatePedidoDisponible(docId, docData) {
    try {
      await admin.firestore().collection('pedidosDisponibles1').doc(docId).update(docData);
      console.log(`Documento con ID ${docId} actualizado en pedidosDisponibles1`);
    } catch (error) {
      console.error('Error al actualizar el documento en pedidosDisponibles:', error);
    }
  }

  async deletePedidoDisponible(docId) {
    try {
      await admin.firestore().collection('pedidosDisponibles1').doc(docId).delete();
      console.log(`Documento con ID ${docId} eliminado de pedidosDisponibles`);
    } catch (error) {
      console.error('Error al eliminar el documento de pedidosDisponibles:', error);
    }
  }


  async createPedidoDisponible(pedido) {
    try {
      await admin.firestore().collection('pedidosDisponibles1').doc(pedido.id).set(pedido);
      console.log(`Documento con ID ${pedido.id} creado en pedidosDisponibles`);
    } catch (error) {
      console.error('Error al crear el documento en pedidosDisponibles:', error);
    }
  }

  async updatePedidoDisponible(docId, docData) {
    try {
      await admin.firestore().collection('pedidosDisponibles1').doc(docId).update(docData);
      console.log(`Documento con ID ${docId} actualizado en pedidosDisponibles`);
    } catch (error) {
      console.error('Error al actualizar el documento en pedidosDisponibles:', error);
    }
  }

  async deletePedidoDisponible(docId) {
    try {
      await admin.firestore().collection('pedidosDisponibles1').doc(docId).delete();
      console.log(`Documento con ID ${docId} eliminado de pedidosDisponibles`);
    } catch (error) {
      console.error('Error al eliminar el documento de pedidosDisponibles:', error);
    }
  }


  
  sendMessage(to, msg, isGroup, caption = '') {
    const append = !isGroup ? '@c.us' : '@g.us';
    let chatId = !to.includes(append) ? `${to}${append}` : to;
    if (chatId[0] === '+') { chatId = chatId.slice(1); }
    
    return new Promise((resolve, reject) => {
      this.client.sendMessage(chatId, msg, { caption })
        .then(resolve)
        .catch(reject);
    });
  }

  async sendMedia(to, file, isGroup, caption) {
    const append = !isGroup ? '@c.us' : '@g.us';
    let chatId = !to.includes(append) ? `${to}${append}` : to;
    if (chatId[0] === '+') { chatId = chatId.slice(1); }

    try {
      let media;

      if (file.startsWith('http')) {
        const response = await axios.get(file, { responseType: 'arraybuffer' });
        const mediaType = response.headers['content-type'];
        const mediaData = Buffer.from(response.data, 'binary').toString('base64');
        media = new MessageMedia(mediaType, mediaData, path.basename(file));
      } else {
        media = MessageMedia.fromFilePath(path.join(this.mediaPath, file));
      }

      return this.client.sendMessage(chatId, media, { caption });
    } catch (error) {
      console.error('Error al enviar el medio:', error);
      throw error;
    }
  }

  onAuth() {
    this.client.on('authenticated', () => {
      console.log('üîê Cliente autenticado exitosamente');
    });
  }

  onAuthFailure() {
    this.client.on('auth_failure', (msg) => {
      console.error('‚ùå Fallo de autenticaci√≥n:', msg);
      this.sessionQR = null;
    });
  }

  getQR() { return this.sessionQR; }



async eliminarDocumentoFirestore(docId) {
    try {
        const docRef = admin.firestore().collection('pedidosDisponibles1').doc(docId);
        await docRef.delete();
        console.log(`Documento con ID ${docId} eliminado de Firestore.`);
    } catch (error) {
        console.error(`Error al eliminar el documento con ID ${docId} de Firestore:`, error);
    }
}





  
  
}

module.exports = WhatsappWeb;
